// Not licensed for onward /re-distribution for any reason and in any form  - see license
// 29/9/2021 from 192.168.1.237  pre20
import java.security.MessageDigest
import groovy.transform.Field
@Field static String mqttPassword=''
@Field static Integer subscribed=0

metadata {
    definition (name: "MQTT Client", namespace: "ukusa", author: "Kevin Hawkins",importUrl: "https://raw.githubusercontent.com/Gledholt Hall/MQTT/beta3/MQTT%20Client%20driver") {
        capability "Initialize"
		capability "Presence Sensor"
		
        command "publishMsg", ["String","String"]
		command "subscribeTopic",["String"]
        command "unsubscribeTopic",["String"]
        command "subscribeWildcardTopic",["String"]
        command "logOutgoingMessages",["Boolean"]
		command "reset"
        command "connect"
        command "disconnect"
        //attribute "sequence", "number"
        attribute "subscribes", "number"
        attribute "waiting","string"
        attribute "RX_minute","number"
        attribute "TX_minute","number"
        attribute "heartbeat","number"
    }
}

//import groovy.transform.Field  // TODO needed ?


def installed() {
    log ("installed...", "WARN")
	initialize()
}

def updated() {
    log ("MQTT client updated...", "INFO")
    initialize()
    state.remove("subs")
    state.remove("password")
    state.remove("seq2")
    state.remove("seqNum")
    state.remove("count")
    state.remove("seq")
}

def uninstalled() {
    log ("disconnecting from mqtt", "INFO")
    interfaces.mqtt.disconnect()
}

def initialize() {
    state.remove("subs")
    state.remove("password")
    state.remove("seq2")
    state.remove("seqNum")
    state.remove("count")
    state.remove("seq")
    state.myHub=false
    unschedule (heartbeat)
    state.heartbeat=0
    state.msgIn=0
    state.msgOut=0
    state.logOut=false
    setHAInDiscovery(false)
    if (state.HAInTopic==null) state.HAInTopic="unused"
    if (state.zwave2mqttTopic==null) state.zwave2mqttTopic="unused"
    if (state.zigbee2mqttTopic==null) state.zigbee2mqttTopic="unused"
    if (state.HAStatestreamTopic==null) state.HAStatestreamTopic="unused"
    if (state.CBusTopic==null) state.CBusTopic="unused"
    state.topic0="DoNoTmatch"
    heartbeat()
    schedule("0 * * ? * *", heartbeat)
    version="beta 3e pre 19"
    
    sendEvent (name: "presence", value: "not present")
    //sendEvent (name: "sequence", value: state.seq++)
    state.waiting = "idle"
    sendEvent (name: "waiting", value: "idle")
    subscribed=0
    sendEvent (name: "subscribes", value: ++subscribed)

	state.continue=false	
    if (state.normHubName==null) state.normHubName = "temporary"
}

def connect() {
    log  ("Initialise MQTT","DEBUG")
    mqttStatus=false
    mqttStatus=mqttConnect()
    while(!mqttStatus) { 
        log ("MQTT connect failed attempt:[$state.connectionAttempts], try again in 10 secs","INFO")
        pauseExecution(10000)  // 10 second pause // TODO refine with increasing periods
        mqttStatus=mqttConnect()
    }
    mqttState=interfaces.mqtt.isConnected()
    if (mqttState) {
        log ( "Connected to MQTT broker ${state.MQTTBroker}","BLUE")
        //subscribeTopic ('homie/'+state.normHubName+'/$heartbeat')
        parent.mqttStatus ("Connect")
        state.connectionAttempts = 0
        //state.seq2=0
        state.msgIn=0
        state.msgOut=0
    }
    else log ("MQTT not connected","ERROR")      
}


void setLogLevel (level) {
    if (level<6) {
        state.logLevel=level.toInteger()
        log ("Log level set to " + level,"INFO")
        log ("## Restarted ##","WARN")
        if (state.zwave2mqttTopic==null) state.zwave2mqttTopic="unused1"
        if (state.zigbee2mqttTopic==null) state.zigbee2mqttTopic="unused2"
        if (state.HAInTopic==null) HAInTopic="unused3"  
    }
}

void setHAInDiscovery(Boolean disc) {
    state.HAInDisc=disc
    log("HAIn Discovery is $disc","INFO")
}
void setUserName(String username) {
    state.username=username
}
void setPassword(String password) {
    mqttPassword=password
}
void setBrokerAddress(String broker) {
    state.MQTTBroker=broker 
}
void setHubName (String normHubName,String hubName) {
    state.normHubName=normHubName
}
void setCleanSession (String clean) {
    state.clean=clean
}
void setHAStatestreamTopic(String HATopic) {
		state.HAStatestreamTopic = HATopic
		log ("HAStatestreamTopic is " + HATopic,"INFO")
}
void setCBusTopic(String CBTopic) {
		state.CBusTopic = CBTopic
		log ("C-Bus Topic is " + CBTopic,"INFO")
}
void setHAInTopic(String HAInTopic) {
		state.HAInTopic = HAInTopic
		log ("HAInTopic is " + HAInTopic,"INFO")
}
void setzigbee2mqttTopic(String zigbee2mqttTopic) {
		state.zigbee2mqttTopic = zigbee2mqttTopic
		log ("zigbee2mqtt Topic is " + zigbee2mqttTopic,"INFO")
}
void setzwave2mqttTopic(String zwave2mqtt) {
		state.zwave2mqttTopic = zwave2mqtt
		log ("zwavejs2mqtt Topic is " + zwave2mqtt,"INFO")
}

void setHomieDevice(String hDev) {
		state.homieDeviceDiscovery = hDev
		log ("homie discovery is for device: " + hDev, "INFO")
	}

boolean mqttConnect() {
        //try {
        def mqttInt = interfaces.mqtt
            log ( "MQTT> client ${version} ${state.normHubName}","INFO")  
            if (state.zwave2mqttTopic==null) state.zwave2mqttTopic="unused1"
            if (state.zigbee2mqttTopic==null) state.zigbee2mqttTopic="unused2"
            if (state.HAInTopic==null) HAInTopic="unused3"
         try{
            if (state.clean=='true') log ("Connecting with 'clean' session as Hubitat_${state.normHubName} to MQTT broker $state.MQTTBroker", "INFO")
            else if (state.clean=='false') log ("Connecting with 'resurrect' session as Hubitat_${state.normHubName} to MQTT broker ${settings?.MQTTBroker}", "INFO")
            mqttInt.connect(state.MQTTBroker, "Hubitat_${state.normHubName}", state.username,mqttPassword,cleanSession: false, lastWillTopic: "Hubitat/${state.normHubName}/LWT", lastWillQos: 0, lastWillMessage: "I died")//give it a chance to start
            pauseExecution(1000)
            mqttState=mqttInt.isConnected()
            if (mqttState) {
                mqttInt.publish("homie/${state.normHubName}/" + '$fw/client',"${version}",1,true)
                //mqttInt.subscribe ('homie/'+state.normHubName+'/$heartbeat')
                sendEvent (name: "presence", value: "present")
                return (true)
             }
            else  return (false)
        } 
        catch(e) {
           log ("MQTT initialise error: ${e.message}", "WARN")
           sendEvent (name: "presence", value: "not present")
           state.connectionAttempts ++
           return (false)
        }     
}

void mqttClientStatus(String message) {
    status=message.take(6)
    mqttState=interfaces.mqtt.isConnected()
    if (status=="Error:") {
        try {
            interfaces.mqtt.disconnect()  // clears buffers
        }
        catch (e)
        {
        }
       
        log ("Broker: ${message} Will restart in 5 seconds","ERROR")
        runIn (5,"adviseStatus")
    }
    else {
        log ("Broker: ${message}","INFO")
        mqttState=interfaces.mqtt.isConnected()
        if (mqttState) {
            log ("MQTT broker connected","INFO")
            //subscribeTopic ('homie/'+state.normHubName+'/$heartbeat')
            sendEvent (name: "presence", value: "present")
            parent.mqttStatus(status)
        }
    }
}

void adviseStatus() {
    log ("Advising app that broker is down","WARN")
    parent.mqttStatus ("Error")
}

def publishMsg(String topic, String payload, int qos, String retained) {  // overload for RM compatibility
    publishMsg(topic, payload, qos, retained.toBoolean())
}

def publishMsg(String topic, String payload,int qos = 1, boolean retained = false, boolean suppress = false ) {
    mqttState=interfaces.mqtt.isConnected()
    if (!mqttState) {
        log ("Dropping message - no MQTT connection","WARN")
        return
    }
    if (suppress == true){
        log ("Suppress: $topic $payload","TRACE")
        if (state.myHub) log("Suppressed: $topic = $payload","LOG")
        return //  this reduces the messages posted to homie topic to bare minimum although this will no longer be homie compliant
    }                      
    if (payload==null) {
        log("Publish payload is null for topic ${topic}","ERROR")
        return
    }
    if (topic==null){
        log("Publish topic is null for payload ${payload}","ERROR")
        return
    }
    qos=1  //enforce FTTB
        if (state.logOut) log ("Publish >>> [$topic]   [$payload]","BLUE")
        interfaces.mqtt.publish(topic, payload, qos, retained)
        //sendEvent (name: "sequence", value: state.seq++)
        state.msgOut++
}


def subscribeTopic (String s) {
    
    log ("MQTT subscribing to: " + s, "INFO")

    mqttState=interfaces.mqtt.isConnected()
    if (mqttState){
        qos=1
        interfaces.mqtt.subscribe(s,qos)
        if (s.contains('/+') || s.contains('/*')) {} 
        else {
            sendEvent (name: "subscribes", value: ++subscribed)
        }
    }
    else log("Dropping subscription - no MQTT connection","WARN")
}

def setStateWaiting (sw) {  // had to use this method as was not working when directly set above.
    state.waiting = sw
    sendEvent (name: "waiting", value: sw)
    //log ("Attribute  " + mqtt.currentWaiting, "KH")
    return
}

def getStateWaiting () {
     return (state.waiting)
}

def setmyhub(mine="false") {
    if (mine=="true") {
        state.myHub=true
    }
    else {
        state.myHub=false
    }
}

def logOutgoingMessages(logging){
    if (logging=='true') state.logOut = true else state.logOut=false
         log ("Changing publish logging to $state.logOut","INFO")
        }
    
def unsubscribeTopic (String s) {
    mqttState=interfaces.mqtt.isConnected()
	log ("MQTT unsubscribing from: " + s, "INFO")
    if (mqttState){
        interfaces.mqtt.unsubscribe(s)
        if (s.contains('/+') || s.contains('/*')) {}         
        else {
            sendEvent (name: "subscribes", value: --subscribed)   // ignore wildcarded subs as cant count unsubs accurately
        } 
    }
    else log("Dropping unsubscribe - no MQTT connection","WARN")
}

def subscribeWildcardTopic (String s) {
    mqttState=interfaces.mqtt.isConnected()
	log ("MQTT subscribing to: " + s, "DEBUG")
    if (mqttState){
        topics=s.split('/')
	    topicCounts=topics.size()
        state.topic0=topics[0]
        state.topic1=topics[1]
        state.topic2=topics[2]
        //state.topic3=topics[3]
        interfaces.mqtt.subscribe(s,1)
        //sendEvent (name: "subscribes", value: ++subscribed) // ignore as wildcarded
        pauseExecution(60)
        interfaces.mqtt.unsubscribe(s)
        log ("MQTT unsubscribing from: " + s, "LOG")
    }
    else log("Dropping subscription - no MQTT connection","WARN")
}

def testme (){
    log.error "howdy"
    return ("hello")
}

def getTopic (String s) {
    mqttState=interfaces.mqtt.isConnected()
	state.continue=false
	log  ("Checking on ${s}","ERROR")
    if (mqttState) {
        interfaces.mqtt.subscribe(s)
        if (s.contains('/+') || s.contains('/*')) {}         
        else {
            sendEvent (name: "subscribes", value: ++subscribed)  // ignore wildcarded subs as cant count unsubs accurately
        }
	    pause (1800)//   TODO adjust based on actual response
	    notfoundevt(s)
    }
}

def notfoundevt(String s){
	if (state.continue==true){
		state.continue = false
		log ("Already exists ${s}","WARN")
	return
	}
	else {
		log ("Time out on getTopic ${s}","WARN")
		sendEvent(name: "getTopic", value: '#NoNe#', data: [state: "", topic: s], isStateChange: true)
	}
	
}

def heartbeat (seqNum=0) {
    sendEvent (name: "TX_minute", value: state.msgOut)
    sendEvent (name: "RX_minute", value: state.msgIn)
    sendEvent (name: "heartbeat", value: state.heartbeat)
    mqttState=interfaces.mqtt.isConnected()
    if (mqttState) interfaces.mqtt.publish("homie/${state.normHubName}" + '/$heartbeat',state.heartbeat.toString() + ", [" + state.msgIn.toString()+','+state.msgOut.toString()+']',1,false)
    state.msgIn=0
    state.msgOut=0
    state.heartbeat++
}


def bufferEmpty(i){
    log  ("MQTT message queue idle","TRACE")
}


def parse(String description) {
    runIn (30, "bufferEmpty")
    state.msgIn++
    topicFull=interfaces.mqtt.parseMessage(description).topic

	def topic=topicFull.split('/')
	def topicCount=topic.size()
    def payloadFull=interfaces.mqtt.parseMessage(description).payload
	def payload=payloadFull.split(',')
    //log (topicFull + "   " + payload, "INFO")
    //
    if (payloadFull.startsWith('{') && payloadFull.endsWith('}')) json="true" else json="false"
    if (topicFull.startsWith('homie/'+state.normHubName+'/$pacing')) parent.pacing(payload[0])
    //if (device.currentWaiting=="idle") parent.lookupP(payload[0],payloadFull,interfaces.mqtt.parseMessage(description).topic, json)  // replacement for event call   // NEW.. TO CHECK ############ <<<<<<<<   
    else if (device.currentValue("waiting", true) == "idle") parent.lookupP(payload[0],payloadFull,interfaces.mqtt.parseMessage(description).topic, json)  // replacement for event call   // NEW.. TO CHECK ############ <<<<<<<<

    
    ///##############   Think we still have to parse all messages that dont require a lookup eg /set etc   TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO 
    ///    Just miss out discovery messages
    
    
    //#########################################################################################################################################################################
    else if (topicFull.startsWith(state.HAInTopic+'/')) {
        if (topic[3]=='config'){                 
            parent.HAIn(payloadFull,topic[1],topic,json)
            return
            }
         else if ((topic[3]=='unit_of_measurement')||(topic[3]=='unit_of_meas')){                  // <<< TO DO >>>>
            parent.HAInUOM(payloadFull,topic[1],topic,json)
            return
            }
         else if (topic[3]=='friendly_name'){                  // <<< TO DO >>>>
            parent.HAInFriendlyName(payloadFull,topic[1],topic,json)
            return
            }
         else if ((state.HAInDisc==true)&&(topic[3]=='state')){                  // if not in discovery then this is an event handled below
            parent.HAInState(payloadFull,topic[1],topic,json)
            return
            }
        else parent.lookupP(payload[0],payloadFull,interfaces.mqtt.parseMessage(description).topic, json)  // replacement for event call
    }
    //#########################################################################################################################################################################
    //#########################################################################################################################################################################
    else if (topicFull.startsWith(state.zigbee2mqttTopic)) {
        if (topic[1] == "bridge") parent.zigbee(payloadFull,topic[1],json)
        //else if parent.onoffEventP (topic[2],payload[0],topic[1])  // not passing update atm as always true ??
        else {  //REVISIT THIS LATER - have temporarily commented out line below
            // parent.inputBooleanEventP(topic[1],payload[3],'binary_sensor',topicFull) // parent.onoffEventP (topic[1],payload[0],"switch")  // not passing update atm as always true ??
        }
        //else parent.zigbeeDev(payloadFull,topic[1],json)
        return
        }
    //#########################################################################################################################################################################
    //#########################################################################################################################################################################
    else if (topicFull.startsWith(state.zwave2mqttTopic)) {
        parent.zwave(payload,topic[1],json)
        return
        }
    //#########################################################################################################################################################################
/*       
    if (topicFull.startsWith('homie/'+state.normHubName+'/$heartbeat')) {
        if (device.currentWaiting != "none"){
            if (device.currentWaiting == "complete") {
            return
            }
            else log ("Waiting for  $device.currentWaiting  [$state.waiting]","WARN")  
            num1=payload[0].toInteger()
            num2=state.seqNum
            if (num1==num2-1) {
                rxMsg= "MQTT>RX:[$state.seq2]  [${interfaces.mqtt.parseMessage(description).payload}]  ${interfaces.mqtt.parseMessage(description).topic}"
                if (payload[1]==device.currentWaiting) log ("Waiting for $device.currentWaiting .. - but it appears there is no queue:-) ","RED")
                version="beta 1"
                if (device.currentWaiting=="name") publishMsg("homie/${state.normHubName}/" +'$fw/name','beta',1,true)
                else if (device.currentWaiting=="client") publishMsg("homie/${state.normHubName}/" + '$fw/client',"${version}",1,true) 
                else if (device.currentWaiting=="version") publishMsg("homie/${state.normHubName}/" +'$fw/version','1',1,true)
            }   
        }
   }
      
    else if (topicFull.startsWith('homie/'+state.normHubName+'/$fw')){
        rxMsg= "MQTT>RX:[$state.seq2]  [${interfaces.mqtt.parseMessage(description).payload}]  ${interfaces.mqtt.parseMessage(description).topic}"
        log ( "              " + rxMsg,"KH")
    }
*/

     else if (topic[0]==state.topic0){
        if ((topic[1]==state.topic1) || (state.topic1=='+')|| (state.topic1=='#')){
            if ((topic[2]==state.topic2) || (state.topic2=='+') || (state.topic2=='#')){
                parent.wildcardTopics(interfaces.mqtt.parseMessage(description).topic)
                log ("Wildcard Match : got some topic details back from ${topic} : ${payload}", "INFO")
                return
               // }
            }
        }
    }
    else if ((topicCount==3)&&(topic[0]==state.CBusTopic)&&(topic[2]=="group")) {  //CBus
        parent.CBusIn (payload,topic[1],json)
    }
    else if ((topicCount==3)&&(topic[0]==state.CBusTopic)&&(topic[2]=="value")) {  //CBus
        parent.CBusTextIn (payload,topic[1],json)
    }
    else if (topic[0]==state.HAStatestreamTopic) {  //HA
        if (topic[1]=='status') {  // HA LWT
				if (payload[0]=="online") {
					log ("Home Assistant [${state.HAStatestreamTopic}] is ONLINE","INFO")
                    parent.synchDevices () // state.HAStatestreamTopic is not used
				}
				else if (payload[0]=="offline") {
					log ("Home Assistant [${state.HAStatestreamTopic}] is OFFLINE","INFO")
				}
				return
			}
			else if (topic[1]=='sensor') {
				if (topic[3]=='state'){
                parent.HASensorEventP(topic[2],payload[0], topic[1], true) 
                return
				}
                else if (topic[3]=='device_class'){
                log ("### [" + payload[0] + "] type for HA Sensor Device ${topic[2]}", "TRACE")
                parent.HASensorTypeP(topic[2],deQuote(payload[0]),topic[1])   
                return
				}
				else if (topic[3]=='friendly_name'){
				log ("Device ${topic[2]} is a HA sensor and is called " +payload[0], "TRACE")
                parent.HASensorFriendlyP (topic[2],deQuote(payload[0]),topic[1])   // TODO This returns a label so is different
				return
				}
				else if (topic[3]=='unit_of_measurement'){
                parent.HASensorUnitP (topic[2],deQuote(payload[0]))
				return
				}

			}			
			else if (topic[1]=='binary_sensor') {
				if (topic[3]=='state'){
                parent.inputBooleanEventP(topic[2],deQuote(payload[0]),topic[1])   
				return
				}
				else if (topic[3]=='friendly_name'){
                    parent.LabelDeviceP("MQTT:HA_"+topic[2],deQuote(payload[0]))   
                return
				}
				else if (topic[3]=='device_class'){ 
                    parent.HABinarySensorDevP(topic[2],deQuote(payload[0]),topic[1])    
                return
				}
			}
		else if (topic[1]=='switch') {
			if (topic[3]=='friendly_name') {
                parent.HASwitchFriendlyP (topic[2],deQuote(payload[0]),topic[1])
                return
			}
			else if (topic[3]=='state'){
                parent.onoffEventP (topic[2],payload[0],topic[1])  // not passing update atm as always true ??
                return
			}
            parent.HAUnknown (topic[2],payload[0])
			log ("Unhandled HA (a) switch MQTT parse  ${topic[0]}  ${topic[1]}  ${topic[2]}  ${topic[3]} - ${payload[0]}", "DEBUG")
            return
		}
        else if (topic[1]=='light') { 
			if (topic[3]=='friendly_name')
			{
				log ("Device ${topic[2]} is a HA light and is called " +payload[0] + " " + friendlyName,"TRACE")
                parent.HALightFriendlyP (topic[2],deQuote(payload[0]),topic[1])
                return
               
			}
			else if (topic[3]=='state'){
                parent.onoffEventP (topic[2],payload[0],topic[1])  // not passing update atm as always true ??
                return
			}
			else if (topic[3]=='brightness'){
                parent.dimEventP (topic[2],payload[0],topic[1],255) // maxLevel passed as 255 always ??
                return
			}
			log ("Unhandled HA (b) light MQTT parse  ${topic[0]}  ${topic[1]}  ${topic[2]}  ${topic[3]} - ${payload[0]}", "DEBUG")
                parent.HAUnknown (topic[2],payload[0])
                return
		}  // not a HA light
			
		else if (topic[1]=='group') {
			if (topic[3]=='friendly_name') {
				log ("Device ${topic[2]} is a HA group and is called " +payload[0], "TRACE")
                parent.HAGroupFriendlyP (topic[2],deQuote(payload[0]),topic[1])
                return
			}
			else if (topic[3]=='state'){
				parent.groupEvent (topic[2],payload[0],topic[1])
                return
			}
			log ("Unhandled HA (c) group MQTT parse  ${topic[0]}  ${topic[1]}  ${topic[2]}  ${topic[3]} - ${payload[0]}", "DEBUG")
            parent.HAUnknown (topic[2],payload[0])
            return
		}			
		else if (topic[1]=='input_boolean') {
			if (topic[3]=='friendly_name') {
                parent.HAInputBooleanFriendlyP (topic[2],deQuote(payload[0]),topic[1])
				log ("Device ${topic[2]} is a HA input boolean and is called " +payload[0], "TRACE")
                return
			}
			else if (topic[3]=='state'){
				log ("Device ${topic[2]} is a HA input boolean and is " +payload[0], "TRACE")
                parent.inputBooleanEventP(topic[2],payload[0],topic[1],topicFull)
                return
			}
			log ("Unhandled HA (d) input_boolean MQTT parse  ${topic[0]}  ${topic[1]}  ${topic[2]}  ${topic[3]} - ${payload[0]}", "DEBUG")
            parent.HAUnknown (topic[2],payload[0])
            return
		}
        else if (topic[1]=='climate') {
			if (topic[3]=='friendly_name') {
                parent.HAClimateFriendlyP(topic[2],deQuote(payload[0]),topic[1])
				log ("Device ${topic[2]} is a HA climate device and is called " +payload[0], "TRACE")
                return
			}
			else if (topic[3]=='state'){
				parent.HAClimateEventP(topic[2],payload[0],topic[3])
				log ("Device ${topic[2]} is a HA climate device and is " +payload[0], "TRACE")
                return
			}
            
//TODO combine these with OR if all the same
            
            else if (topic[3]=='temperature'){
				parent.HAClimateEventP(topic[2],payload[0],topic[3])
				log ("Device ${topic[2]} is a HA climate device and is " +payload[0], "TRACE")
                return
			}
            else if (topic[3]=='hvac_action'){
				parent.HAClimateEventP(topic[2],deQuote(payload[0]),topic[3])
				log ("Device ${topic[2]} is a HA climate device and is " +payload[0], "TRACE")
                return
			}
            else if (topic[3]=='current_temperature'){
				parent.HAClimateEventP(topic[2],payload[0],topic[3])
				log ("Device ${topic[2]} is a HA climate device and is " +payload[0], "TRACE")
                return
			}
			log ("Unhandled HA (e) climate MQTT parse  ${topic[0]}  ${topic[1]}  ${topic[2]}  ${topic[3]} - ${payload[0]}", "DEBUG")
            parent.HAUnknown (topic[2],payload[0])
            return
		}
        else if (topic[1]=='device_tracker') {
			if (topic[3]=='friendly_name') {
                parent.HADeviceTrackerFriendlyP(topic[2],deQuote(payload[0]),topic[1])
				log ("Device ${topic[2]} is a HA tracker device and is called " +payload[0], "TRACE")
                return
			}
			else if (topic[3]=='state'){
				parent.parent.inputBooleanEventP(topic[2],payload[0],topic[1],'')  //topicfull not used here ?
                return
			}
			log ("Unhandled HA (f) device_tracker MQTT parse  ${topic[0]}  ${topic[1]}  ${topic[2]}  ${topic[3]} - ${payload[0]}", "DEBUG")
            parent.HAUnknown (topic[2],payload[0])
            return
		}
         else if (topic[1]=='cover') {
			if (topic[3]=='friendly_name') {
                parent.HACoverFriendlyP(topic[2],deQuote(payload[0]),topic[1])
				log ("Device ${topic[2]} is a HA cover and is called " +payload[0], "TRACE")
                return
			}
            else if (topic[3]=='current_position'){
                parent.dimEventP(topic[2],payload[0],topic[1])
				log ("Device ${topic[2]} is a HA cover and is at position " +payload[0], "TRACE")
                return
			}
			log ("Unhandled HA (g) cover MQTT parse  ${topic[0]}  ${topic[1]}  ${topic[2]}  ${topic[3]} - ${payload[0]}", "DEBUG")
            parent.HAUnknown (topic[2],payload[0])
            return
		}
        else if (topic[1]=='locks') {
            //state.seq2++
            //sequence=state.seq2.toString()
			if (topic[3]=='friendly_name') {                
				log ("Device ${topic[2]} is a HA lock and is called " +payload[0], "TRACE")
                parent.HALockFriendlyP(topic[2],deQuote(payload[0]),topic[1])
                return
			}
			else if (topic[3]=='state'){
                parent.inputBooleanEventP(topic[2],payload[0],topic[1],topicFull)
                return
			}
			log ("Unhandled HA (h) lock MQTT parse  ${topic[0]}  ${topic[1]}  ${topic[2]}  ${topic[3]} - ${payload[0]}", "DEBUG")
            parent.HAUnknown (topic[2],payload[0])
            return

		}            
        else if (topic[1]=='person') {
			if (topic[3]=='friendly_name') {
				parent.HAPresenceFriendlyP(topic[2],deQuote(payload[0]),topic[1])
                log ("Device ${topic[2]} is a HA person and is called " +payload[0], "TRACE")
                return
			}
			else if (topic[3]=='state'){
                parent.PresenceEventP(topic[2],payload[0],topic[1])
                return
			}
			log ("Unhandled HA (i) person MQTT parse  ${topic[0]}  ${topic[1]}  ${topic[2]}  ${topic[3]} - ${payload[0]}", "DEBUG")
            parent.HAUnknown (topic[2],payload[0])
            return
		}          
			log ("Unhandled (j) HA MQTT parse  ${topic[0]}  ${topic[1]}  ${topic[2]}  ${topic[3]} - ${payload[0]}", "WARN")
            parent.HAUnknown (topic[2],payload[0])
            return
    } // not HA

// ##################################################   homie ###############################################	
    
	else if (topic[0]=="homie" && topic[1]== "${state.normHubName}"){ //local - look for incoming homie 'set' commands that control Hubitat devices here
        log ("Received this message from homie " + topic + " " + payload, "TRACE")
            //state.seq2++
            //sequence=state.seq2.toString()
		if (topicCount==6) {   // rather than these why not just check last topic  - endsWith("/set")
			if ((topic[5]=="set")&&(topic[4]=="rgb")) {
                parent.commandP(topic[2],payload[0],payload,payloadFull,topic[3],interfaces.mqtt.parseMessage(description),json)
				log ("Received this " + payload + "  " + payload.size(), "TRACE")
                return					
			}
        }      
        else if (topicCount==5) { 
			if (topic[4]=="set") {
                parent.commandP(topic[2],payload[0],payload,payloadFull,topic[3],interfaces.mqtt.parseMessage(description),json)
				log ("Received this " + payload + "  " + payload.size(), "TRACE")
                return				
			}
			else {
				log ("Received unexpected message from homie " + topic + " " + payload, "WARN")
			}
		}
		else if (topicCount==4) {
			if (topic[3]=='$properties'){     // This will be a response to a 'getMQTT' for the $properties of an inbuilt device to append to.
				log ("UNSUBSCRIBE from ${interfaces.mqtt.parseMessage(description).topic}","DEBUG")
                unsubscribe(interfaces.mqtt.parseMessage(description).topic)
                parent.topicPayload (topic[2],payload,interfaces.mqtt.parseMessage(description).topic)
                //sendEvent (name: "subscribes", value: ++subscribed)				
				log ("Timeout cancelled as got a property response  ${payload}   ${payload[0]}  from  ${topic}","DEBUG")
                return
			}  

	    }  //topiccount 4
    } // not local homie message	
	else if (topic[0]=="homie" && topic[1]== state.homieDeviceDiscovery)  {   // remote subscribed homie) 
        log ("homie discovery","TRACE")
		if (topic[2]=='$nodes') {  // maybe pass this directly to the input selector ??
			log ("============= ${payload.size()} homie entries for device ${topic[1]} =============",, "INFO")
			return
		}
		if (topic[3]=='onoff') {
            parent.onoffEventP (topic[2],payload[0],topic[1]) // TODO This may need attention as I'm not passing the 'topic' value below but method doesn't seem to use it ?
            return
		}
		else if (topic[3]=='dim' && topicCount==4) {
            parent.dimEventP (topic[2],payload[0],topic[1],255)  //TODO check see below
            // TODO check if this level handling is problematic assuming 1.0 ?
            return
		}
        else if ((topic[3]=='dim') && (topic[4]=='$format') && (topicCount==5)) {
            parent.formatP (topic[2], payload[0])   // ,interfaces.mqtt.parseMessage(description).topic)
            return
		}
        else if (topic[3]=="$properties") {
            
            log ("New $properties discovery" + interfaces.mqtt.parseMessage(description).payload + " for " + topic, "LOG")
        }
		else if (topic[3]=='$type') {
			switch (payload[0]) {
				case 'switch':
                case 'socket':
					parent.homieOnOffDev (topic[2],'onoff')
					break
				case 'light':
                case 'RGBT light':
                case 'RGB light':
                case 'CT light':
                    parent.homieDimDev (topic[2],'dim')
					break
				case 'sensor':
                    parent.homieSensorDev (topic[2],'sensor')
					break
				case 'thermostat':
                   parent.homieUnknownDev (topic[2],payload[0])
					break
                case 'button':
                    parent.homieButtonDev (topic[2],'button')
					break
                case 'variable':
                    parent.homieVariableDev (topic[2],'variable')
                    break
                 case 'lock':
                    parent.homieLockCapability (topic[2],'lock')
                    break                
				default:			
                    parent.homieUnknownDev (topic[2],payload[0])
					break
			}
                log ("Registering homie device ${topic[2]} of type ${payload[0]} ","DEBUG")
		}
        
		else if (topic[3]=='$name') { 
            parent.LabelDeviceP ("MQTT:homie_"+topic[2],payload[0])
            return
		 }
        else if (topicCount==5)
            {
            if (topic[4]=='$unit') { 
            //log ( "--$state.seq2--   - mS","DEBUG")
			log("Received homie UOM from MQTT ${topic[2]} " + status, "TRACE")
		 }
         }
        else log ("Unhandled" + topic,"KH")
	} // end remote homie
    
    else if (topic[0]=='shellies')
    {
        if (topic[2] == "online" | topic[2] == "onlineRet") {
            //if (payload[0] == "true") {
                 parent.ShellyDev(topic[1],payload[0])
                 // log  ("Found Shelly device ${topic[1]}", "LOG")
                 // We need to determine how many relays and other endpoints there are
                 //def evt47 = createEvent(name: "ShellyDevice", value: topic[1],data:[seq: sequence], isStateChange: true)
                 //def evt47 = createEvent(name: "ShellyRelayDev", value: topic[1], isStateChange: true)
				return
            //else if (payload[0] == "false") log  ("Shelly device ${topic[1]} is offline", "LOG")
        }        
        else if (topicCount>3) {
            if (topic[3] == "input") {  
            }
            else if (topic[3] == "relay"){ 
            }
        }
        return
    }
	else {  // unhandled parse messages arrive here
        top=interfaces.mqtt.parseMessage(description).topic
        if (json=="true")  log ("Ad hoc MQTT parse  $top       "+payloadFull, "DEBUG")
        else log ("ad hoc MQTT parse  $top       ${payload[0]}", "DEBUG")
        parent.lookupP(payload[0],payloadFull,interfaces.mqtt.parseMessage(description).topic, json)  // replacement for event call
	}
    json="false"
}

def deQuote (s) {
 	s=s.replaceAll('^\"|\"$', "")
	return s
}

def reset()
	{
        try {
        	interfaces.mqtt.disconnect()
            log ("Disconnected MQTT", "INFO")
        } catch(e) {
            log ("Disconnecting : ${e.message}", "WARN")
        }
		log ("Resetting MQTT connection", "INFO")
		initialize()
        connect()
	}

def disconnect()
	{
        try {
        	interfaces.mqtt.disconnect()
            log ("Disconnected MQTT", "INFO")
            sendEvent (name: "presence", value: "not present")
        } catch(e) {
            log ("Disconnecting failed : ${e.message}", "WARN")
        }
        parent.mqttStatus ("Error")
	}

def simulateError (type) {
            try {
        	interfaces.mqtt.disconnect()
            log ("Force Disconnected MQTT", "INFO")
            } catch(e) {
            log ("Disconnecting : ${e.message}", "WARN")
            }
            parent.mqttStatus ("Disconnected")
}
    
	
def setStateVar(var,value,value2=null) {	//DEPRECATED // Better to expose as attributes 
    return
	if (var == "logLevel"){
		state.logLevel = value.toInteger()
        log ("## Restarted ##","WARN")
		log ("Log Level set to " + value,"INFO")
	}
	else if (var == "homieDevice"){
		state.homieDeviceDiscovery = value
		log ("homie discovery is for device: " + value, "INFO")
	}
	else if (var == "HAStatestreamTopic"){
		state.HAStatestreamTopic = value
		log ("HAStatestreamTopic is " + value,"INFO")
	}
	else if (var == "MQTTmyStatus") {
		sendEvent (name: "presence", value: value)
				   log ("Reporting broker status as ${value}","INFO")
	}
		else log ("Tried to set a non supported state variable in MQTT client ${var}","ERROR")
}

def pause(millis) {
	pauseExecution(millis.toInteger())	
}

def MD5(String s){
    if (s==null) s='123'
    MessageDigest.getInstance("MD5").digest(s.bytes).encodeHex().toString()
}

def log(data, type) {
	data = "MQTT> ${data ?: ''}"
    if (determineLogLevel(type) >= state.logLevel) {
        switch (type?.toUpperCase()) {
            case "TRACE":
                log.trace "${data}"
                break
            case "DEBUG":
                log.debug "${data}"
                break
            case "INFO":
                log.info "${data}"
                break
            case "WARN":
                log.warn "${data}"
                break
            case "ERROR":
                log.error "${data}"
                break
			case "DISABLED":
			    break
            case "BLUE":
                log.info "<font color='blue'>${data}</font>"
                break
            case "RED":
                log.info "<font color='red'>${data}</font>"
                break
            case "ORANGE":
                log.info "<font color='orange'>${data}</font>"
                break
            case "GREEN":
                log.info "<font color='green'>${data}</font>"
                break
            case "YELLOW":
                log.info "<font color='yellow'>${data}</font>"
                break
            case "KH":
                 if (state.myHub) log.trace "<font color='red'>${data}</font>"
                 break
            case "LOG":
                 if (state.myHub) log.trace "<font color='blue'>${data}</font>"
                 break
            default:
                log.error "MQTT -- ${device.label} -- Invalid Log Setting"
        }
    }
}

private determineLogLevel(data) {
    switch (data?.toUpperCase()) {
        case "TRACE":
            return 0
            break
        case "DEBUG":
            return 1
            break
        case "INFO":
            return 2
            break
        case "WARN":
            return 3
            break
        case "ERROR":
        	return 4
            break
		case "DISABLED":
		    return 5
		    break
        case "RED":
        case "BLUE":
        case "GREEN":
        case "YELLOW":
        case "ORANGE":
        case "LOG":
        case "KH":
            return 6
            break
        default:
            return 1
    }
}
