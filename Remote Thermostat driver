/*
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 */

// This is a dumb device thermostat handler just exposing commands and attributes to act as a mirror of a remote intelligent device on MQTT
// It implements basic blocking of cmd loops via MQTT

preferences {
}

metadata {
	    definition (name: "Remote Thermostat", namespace: "ukusa", author: "Kevin Hawkins") {
        
		capability "Actuator"
		capability "Thermostat"
        capability "Temperature Measurement"
		capability "Thermostat Setpoint"
        capability "Thermostat Heating Setpoint"
		capability "Thermostat Mode"
		capability "Thermostat Operating State"
		capability "Relative Humidity Measurement"
		//capability "Refresh"

        attribute "thermostatOperatingState", "String"

		command "on"
		command "emergencyHeat"
        command "setTemperature", ["Integer"]
        command "setThermostatSetpoint", ["Integer"]
        command "setThermostatOperatingState",["String","Boolean"]
        //command "setThermostatFanMode",["String"]  // should be enum
	}
}

def updated(){
}

def installed(){
}

def refresh() {
}

def setHeatingSetpoint(targetTemperature) {
    sendEvent(name: "heatingSetpoint", value: targetTemperature, isStateChange: true)
}

def setCoolingSetpoint(targetTemperature) {
    sendEvent(name: "coolingSetpoint", value: targetTemperature, isStateChange: true)
}

def setThermostatMode(requiredMode,event=true){
    if (event) {
        cmdTopic= device.getDataValue("state_Cmd")
        if (cmdTopic!=null||cmdTopic!=' '||cmdTopic!='') {
            parent.mqttPublishMsg (cmdTopic,requiredMode,1,false) 
        }
    }
	switch (requiredMode) {
    	case "heat":
        	heat()
        break
        case "cool":
            cool()
        break
        case "auto":
        	auto()
        break
		case "off":
        	off()
        break
		case "emergency heat":
        	emergencyHeat()
        break
     }
}

def temperatureUp(){
	if (device.currentValue("thermostatMode") == "heat") {
    	heatingSetpointUp()
    } else {
    	log.debug ("temperature setpoint not supported in the current thermostat mode")
    }
}

def temperatureDown(){
	if (device.currentValue("thermostatMode") == "heat") {
    	heatingSetpointDown()
    } else {
    	log.debug ("temperature setpoint not supported in the current thermostat mode")
    }
}

def auto() {
    sendEvent(name: "thermostatMode", value: 'cool', isStateChange: true)
}

def on() {
    sendEvent(name: "thermostatMode", value: 'on', isStateChange: true)
}

def off() {
    sendEvent(name: "thermostatMode", value: 'off', isStateChange: true)
}

def heat(){
    sendEvent(name: "thermostatMode", value: 'heat', isStateChange: true)
}

def cool(){
    sendEvent(name: "thermostatMode", value: 'cool', isStateChange: true)
}

def emergencyHeat(){
    sendEvent(name: "thermostatMode", value: 'emergency heat', isStateChange: true)
}

def setTemperature(temperature,event){
    sendEvent(name: "temperature", value: temperature, isStateChange: true)
    if (event) {
        cmdTopic= device.getDataValue("temperature_Cmd")   // not sure this is a useful cmd to send ?
        if (cmdTopic!=null||cmdTopic!=' '||cmdTopic!='') {
            parent.mqttPublishMsg (cmdTopic,temperature,1,false) 
        }
    }
}

def setThermostatSetpoint(temperature, event=true) {
    sendEvent(name: "thermostatSetpoint", value: temperature, isStateChange: true)
    if (event) {
        cmdTopic= device.getDataValue("thermostat-setpoint_Cmd")
        if (cmdTopic!=null||cmdTopic!=' '||cmdTopic!='') {
            parent.mqttPublishMsg (cmdTopic,temperature,1,false) 
        }
    }
}

def setThermostatOperatingState(mode,event=true) {
    sendEvent(name: "thermostatOperatingState", value: mode, isStateChange: true)
    if (event) {
        cmdTopic= device.getDataValue("thermostat-setpoint_Cmd")
        if (cmdTopic!=null||cmdTopic!=' '||cmdTopic!='') {
            parent.mqttPublishMsg (cmdTopic,temperature,1,false) 
        }
    }
}

def setThermostatFanMode(mode,event=true) {
    sendEvent(name: "thermostatFanMode", value: mode, isStateChange: true)
    if (event) {
        cmdTopic= device.getDataValue("thermostatFanMode_Cmd")
        if (cmdTopic!=null||cmdTopic!=' '||cmdTopic!='') {
            parent.mqttPublishMsg (cmdTopic,mode,1,false) 
        }
    } 
}


    
